type Node {
  id: ID!
  name: String!
  includedRootNodes: [Node!]
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node
}

enum NodePlacement {
  FLAT
  EMBEDED
}

type Mutation {
  createNode(id: ID!, input: NodeInput): Node
}

input NodeInput {
  name: String!
  placement: NodePlacement!
  referredNodeId: String
}
