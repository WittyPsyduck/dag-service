type Node {
  id: ID!
  name: String!
  embededNodes: [Node!]
  nextNodes: [Node!]
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  node(id: ID!): Node
}

enum NodePlacement {
  FLAT
  EMBEDED
}

type Mutation {
  insertNode(input: InsertNodeInput): Node
}

input NodeInput {
  name: String!
  embededNodes: [NodeInput!]
  nextNodes: [NodeInput!]
}

input InsertNodeInput {
  name: String!
  placement: NodePlacement!
  referredNodeId: String
  embededNodes: [NodeInput!]
  nextNodes: [NodeInput!]
}
